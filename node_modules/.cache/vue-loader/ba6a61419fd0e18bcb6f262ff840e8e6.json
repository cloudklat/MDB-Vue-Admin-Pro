{"remainingRequest":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\src\\components\\modals\\Modals.vue?vue&type=template&id=16a552ef&scoped=true&","dependencies":[{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\src\\components\\modals\\Modals.vue","mtime":1585101964000},{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJtZGItY29udGFpbmVyIiwgWwogICAgX2MoCiAgICAgICJzZWN0aW9uIiwKICAgICAgWwogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1tb2RhbCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7IGZyYW1lOiAiIiwgcG9zaXRpb246ICJ0b3AiLCBzaG93OiBfdm0uc2hvd01vZGFsIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbCA9IGZhbHNlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLW1vZGFsLWJvZHkiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gSW1wZWRpdCBuaXNpIHF1byBwcm92aWRlbnQgZnVnaWF0IHJlcHJlaGVuZGVyaXQgbm9zdHJ1bSBxdW9zLi4uIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBjb2xvcjogInNlY29uZGFyeSIgfSwKICAgICAgICAgICAgICAgICAgICBuYXRpdmVPbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNsb3NlIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiU2F2ZSBjaGFuZ2VzIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbW9kYWwiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogeyBmcmFtZTogIiIsIHBvc2l0aW9uOiAiYm90dG9tIiwgc2hvdzogX3ZtLnNob3dNb2RhbDIgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsMiA9IGZhbHNlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLW1vZGFsLWJvZHkiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gSW1wZWRpdCBuaXNpIHF1byBwcm92aWRlbnQgZnVnaWF0IHJlcHJlaGVuZGVyaXQgbm9zdHJ1bSBxdW9zLi4uIgogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBjb2xvcjogInNlY29uZGFyeSIgfSwKICAgICAgICAgICAgICAgICAgICBuYXRpdmVPbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsMiA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJDbG9zZSIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBjb2xvcjogInByaW1hcnkiIH0gfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIlNhdmUgY2hhbmdlcyIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLW1vZGFsIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICByZW1vdmVCYWNrZHJvcDogIiIsCiAgICAgICAgICAgICAgc2lkZTogIiIsCiAgICAgICAgICAgICAgcG9zaXRpb246ICJ0b3AtcmlnaHQiLAogICAgICAgICAgICAgIHNob3c6IF92bS5zaG93TW9kYWwzCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDMgPSBmYWxzZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1tb2RhbC1oZWFkZXIiLAogICAgICAgICAgICAgIFtfYygibWRiLW1vZGFsLXRpdGxlIiwgW192bS5fdigiTW9kYWwgdGl0bGUiKV0pXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJtZGItbW9kYWwtYm9keSIsIFtfdm0uX3YoIi4uLiIpXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtZm9vdGVyIiwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJzZWNvbmRhcnkiIH0sCiAgICAgICAgICAgICAgICAgICAgbmF0aXZlT246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDMgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiQ2xvc2UiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgY29sb3I6ICJwcmltYXJ5IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTYXZlIGNoYW5nZXMiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1tb2RhbCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgcmVtb3ZlQmFja2Ryb3A6ICIiLAogICAgICAgICAgICAgIHNpZGU6ICIiLAogICAgICAgICAgICAgIHBvc2l0aW9uOiAidG9wLWxlZnQiLAogICAgICAgICAgICAgIHNob3c6IF92bS5zaG93TW9kYWw0CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDQgPSBmYWxzZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1tb2RhbC1oZWFkZXIiLAogICAgICAgICAgICAgIFtfYygibWRiLW1vZGFsLXRpdGxlIiwgW192bS5fdigiTW9kYWwgdGl0bGUiKV0pXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJtZGItbW9kYWwtYm9keSIsIFtfdm0uX3YoIi4uLiIpXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtZm9vdGVyIiwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJzZWNvbmRhcnkiIH0sCiAgICAgICAgICAgICAgICAgICAgbmF0aXZlT246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDQgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiQ2xvc2UiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgY29sb3I6ICJwcmltYXJ5IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTYXZlIGNoYW5nZXMiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1tb2RhbCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgcmVtb3ZlQmFja2Ryb3A6ICIiLAogICAgICAgICAgICAgIHNpZGU6ICIiLAogICAgICAgICAgICAgIHBvc2l0aW9uOiAiYm90dG9tLXJpZ2h0IiwKICAgICAgICAgICAgICBzaG93OiBfdm0uc2hvd01vZGFsNQogICAgICAgICAgICB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWw1ID0gZmFsc2UKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtaGVhZGVyIiwKICAgICAgICAgICAgICBbX2MoIm1kYi1tb2RhbC10aXRsZSIsIFtfdm0uX3YoIk1vZGFsIHRpdGxlIildKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygibWRiLW1vZGFsLWJvZHkiLCBbX3ZtLl92KCIuLi4iKV0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLW1vZGFsLWZvb3RlciIsCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAic2Vjb25kYXJ5IiB9LAogICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWw1ID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNsb3NlIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiU2F2ZSBjaGFuZ2VzIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbW9kYWwiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHJlbW92ZUJhY2tkcm9wOiAiIiwKICAgICAgICAgICAgICBzaWRlOiAiIiwKICAgICAgICAgICAgICBwb3NpdGlvbjogImJvdHRvbS1sZWZ0IiwKICAgICAgICAgICAgICBzaG93OiBfdm0uc2hvd01vZGFsNgogICAgICAgICAgICB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWw2ID0gZmFsc2UKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtaGVhZGVyIiwKICAgICAgICAgICAgICBbX2MoIm1kYi1tb2RhbC10aXRsZSIsIFtfdm0uX3YoIk1vZGFsIHRpdGxlIildKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygibWRiLW1vZGFsLWJvZHkiLCBbX3ZtLl92KCIuLi4iKV0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLW1vZGFsLWZvb3RlciIsCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAic2Vjb25kYXJ5IiB9LAogICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWw2ID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNsb3NlIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiU2F2ZSBjaGFuZ2VzIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbW9kYWwiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogeyBzaXplOiAic20iLCBzaG93OiBfdm0uc2hvd01vZGFsNyB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWw3ID0gZmFsc2UKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtaGVhZGVyIiwKICAgICAgICAgICAgICBbX2MoIm1kYi1tb2RhbC10aXRsZSIsIFtfdm0uX3YoIk1vZGFsIHRpdGxlIildKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygibWRiLW1vZGFsLWJvZHkiLCBbX3ZtLl92KCIuLi4iKV0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLW1vZGFsLWZvb3RlciIsCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAic2Vjb25kYXJ5Iiwgc2l6ZTogInNtIiB9LAogICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWw3ID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNsb3NlIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIsIHNpemU6ICJzbSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiU2F2ZSBjaGFuZ2VzIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbW9kYWwiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogeyBzaG93OiBfdm0uc2hvd01vZGFsOCB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWw4ID0gZmFsc2UKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtaGVhZGVyIiwKICAgICAgICAgICAgICBbX2MoIm1kYi1tb2RhbC10aXRsZSIsIFtfdm0uX3YoIk1vZGFsIHRpdGxlIildKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygibWRiLW1vZGFsLWJvZHkiLCBbX3ZtLl92KCIuLi4iKV0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLW1vZGFsLWZvb3RlciIsCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAic2Vjb25kYXJ5Iiwgc2l6ZTogInNtIiB9LAogICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWw4ID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNsb3NlIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIsIHNpemU6ICJzbSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiU2F2ZSBjaGFuZ2VzIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbW9kYWwiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogeyBzaXplOiAibGciLCBzaG93OiBfdm0uc2hvd01vZGFsOSB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWw5ID0gZmFsc2UKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtaGVhZGVyIiwKICAgICAgICAgICAgICBbX2MoIm1kYi1tb2RhbC10aXRsZSIsIFtfdm0uX3YoIk1vZGFsIHRpdGxlIildKV0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygibWRiLW1vZGFsLWJvZHkiLCBbX3ZtLl92KCIuLi4iKV0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLW1vZGFsLWZvb3RlciIsCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAic2Vjb25kYXJ5Iiwgc2l6ZTogInNtIiB9LAogICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWw5ID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNsb3NlIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIsIHNpemU6ICJzbSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiU2F2ZSBjaGFuZ2VzIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbW9kYWwiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogeyBzaXplOiAiZmx1aWQiLCBzaG93OiBfdm0uc2hvd01vZGFsMTAgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsMTAgPSBmYWxzZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1tb2RhbC1oZWFkZXIiLAogICAgICAgICAgICAgIFtfYygibWRiLW1vZGFsLXRpdGxlIiwgW192bS5fdigiTW9kYWwgdGl0bGUiKV0pXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJtZGItbW9kYWwtYm9keSIsIFtfdm0uX3YoIi4uLiIpXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtZm9vdGVyIiwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJzZWNvbmRhcnkiLCBzaXplOiAic20iIH0sCiAgICAgICAgICAgICAgICAgICAgbmF0aXZlT246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDEwID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNsb3NlIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIsIHNpemU6ICJzbSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiU2F2ZSBjaGFuZ2VzIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbW9kYWwiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogeyBmdWxsSGVpZ2h0OiAiIiwgcG9zaXRpb246ICJyaWdodCIsIHNob3c6IF92bS5zaG93TW9kYWwxMSB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwxMSA9IGZhbHNlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLW1vZGFsLWhlYWRlciIsCiAgICAgICAgICAgICAgW19jKCJtZGItbW9kYWwtdGl0bGUiLCBbX3ZtLl92KCJNb2RhbCB0aXRsZSIpXSldLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIm1kYi1tb2RhbC1ib2R5IiwgW192bS5fdigiLi4uIildKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1tb2RhbC1mb290ZXIiLAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBjb2xvcjogInNlY29uZGFyeSIgfSwKICAgICAgICAgICAgICAgICAgICBuYXRpdmVPbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsMTEgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiQ2xvc2UiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgY29sb3I6ICJwcmltYXJ5IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTYXZlIGNoYW5nZXMiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1tb2RhbCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7IGZ1bGxIZWlnaHQ6ICIiLCBwb3NpdGlvbjogImxlZnQiLCBzaG93OiBfdm0uc2hvd01vZGFsMTIgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsMTIgPSBmYWxzZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1tb2RhbC1oZWFkZXIiLAogICAgICAgICAgICAgIFtfYygibWRiLW1vZGFsLXRpdGxlIiwgW192bS5fdigiTW9kYWwgdGl0bGUiKV0pXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJtZGItbW9kYWwtYm9keSIsIFtfdm0uX3YoIi4uLiIpXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtZm9vdGVyIiwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJzZWNvbmRhcnkiIH0sCiAgICAgICAgICAgICAgICAgICAgbmF0aXZlT246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDEyID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNsb3NlIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiU2F2ZSBjaGFuZ2VzIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbW9kYWwiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogeyBmdWxsSGVpZ2h0OiAiIiwgcG9zaXRpb246ICJ0b3AiLCBzaG93OiBfdm0uc2hvd01vZGFsMTMgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsMTMgPSBmYWxzZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1tb2RhbC1oZWFkZXIiLAogICAgICAgICAgICAgIFtfYygibWRiLW1vZGFsLXRpdGxlIiwgW192bS5fdigiTW9kYWwgdGl0bGUiKV0pXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJtZGItbW9kYWwtYm9keSIsIFtfdm0uX3YoIi4uLiIpXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtZm9vdGVyIiwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJzZWNvbmRhcnkiIH0sCiAgICAgICAgICAgICAgICAgICAgbmF0aXZlT246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDEzID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNsb3NlIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiU2F2ZSBjaGFuZ2VzIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbW9kYWwiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGZ1bGxIZWlnaHQ6ICIiLAogICAgICAgICAgICAgIHBvc2l0aW9uOiAiYm90dG9tIiwKICAgICAgICAgICAgICBzaG93OiBfdm0uc2hvd01vZGFsMTQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsMTQgPSBmYWxzZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1tb2RhbC1oZWFkZXIiLAogICAgICAgICAgICAgIFtfYygibWRiLW1vZGFsLXRpdGxlIiwgW192bS5fdigiTW9kYWwgdGl0bGUiKV0pXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJtZGItbW9kYWwtYm9keSIsIFtfdm0uX3YoIi4uLiIpXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtZm9vdGVyIiwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJzZWNvbmRhcnkiIH0sCiAgICAgICAgICAgICAgICAgICAgbmF0aXZlT246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDE0ID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNsb3NlIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiU2F2ZSBjaGFuZ2VzIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbW9kYWwiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIHNpemU6ICJzdWNjZXNzIiwKICAgICAgICAgICAgICBwb3NpdGlvbjogIm5vdGlmeSIsCiAgICAgICAgICAgICAgc2hvdzogX3ZtLnNob3dNb2RhbDE1CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDE1ID0gZmFsc2UKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJtZGItbW9kYWwtaGVhZGVyIiwgeyBzdGF0aWNDbGFzczogInRleHQtd2hpdGUiIH0sIFsKICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkaW5nIGxlYWQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiTW9kYWwgU3VjY2VzcyIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtYm9keSIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJtZGItaWNvbiIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi0zIGFuaW1hdGVkIHJvdGF0ZUluIiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogImNoZWNrIiwgc2l6ZTogIjR4IiB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gSW1wZWRpdCBpdXN0byBudWxsYSBhcGVyaWFtIGJsYW5kaXRpaXMgYWQgY29uc2VxdWF0dXIgaW4gZG9sb3JlcyBjdWxwYSwgZGlnbmlzc2ltb3MsIGVpdXMgbm9uIHBvc3NpbXVzIGZ1Z2lhdC4gRXNzZSByYXRpb25lIGZ1Z2EsIGVuaW0sIGFiIG9mZmljaWlzIHRvdGFtLiAiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtZm9vdGVyIiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAianVzdGlmeS1jb250ZW50LWNlbnRlciIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgY29sb3I6ICJzdWNjZXNzIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgR2V0IGl0IG5vdyAiKSwKICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLWdlbSB0ZXh0LXdoaXRlIG1sLTEiIH0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBvdXRsaW5lOiAic3VjY2VzcyIgfSwKICAgICAgICAgICAgICAgICAgICBuYXRpdmVPbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsMTUgPSBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiTm8sIHRoYW5rcyIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLW1vZGFsIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsgc2l6ZTogImluZm8iLCBwb3NpdGlvbjogIm5vdGlmeSIsIHNob3c6IF92bS5zaG93TW9kYWwxNiB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwxNiA9IGZhbHNlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygibWRiLW1vZGFsLWhlYWRlciIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIiB9LCBbCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyBsZWFkIiB9LCBbX3ZtLl92KCJNb2RhbCBJbmZvIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoIm1kYi1tb2RhbC1ib2R5IiwgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZGJvb3RzdHJhcC5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTYvMTEvYWRtaW4tZGFzaGJvYXJkLWJvb3RzdHJhcC5qcGciLAogICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICIgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIEltcGVkaXQgaXVzdG8gbnVsbGEgYXBlcmlhbSBibGFuZGl0aWlzIGFkIGNvbnNlcXVhdHVyIGluIGRvbG9yZXMgY3VscGEsIGRpZ25pc3NpbW9zLCBlaXVzIG5vbiBwb3NzaW11cyBmdWdpYXQuIEVzc2UgcmF0aW9uZSBmdWdhLCBlbmltLCBhYiBvZmZpY2lpcyB0b3RhbS4gIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLW1vZGFsLWZvb3RlciIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImp1c3RpZnktY29udGVudC1jZW50ZXIiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoIm1kYi1idG4iLCB7IGF0dHJzOiB7IGNvbG9yOiAiaW5mbyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIEdldCBpdCBub3cgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1nZW0gdGV4dC13aGl0ZSBtbC0xIiB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb3V0bGluZTogImluZm8iIH0sCiAgICAgICAgICAgICAgICAgICAgbmF0aXZlT246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDE2ID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIk5vLCB0aGFua3MiKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1tb2RhbCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc2l6ZTogImRhbmdlciIsCiAgICAgICAgICAgICAgcG9zaXRpb246ICJub3RpZnkiLAogICAgICAgICAgICAgIHNob3c6IF92bS5zaG93TW9kYWwxNwogICAgICAgICAgICB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwxNyA9IGZhbHNlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygibWRiLW1vZGFsLWhlYWRlciIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXdoaXRlIiB9LCBbCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyBsZWFkIiB9LCBbX3ZtLl92KCJNb2RhbCBEYW5nZXIiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibWRiLW1vZGFsLWJvZHkiLCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTMiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInAiKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciIgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJzaG9wcGluZy1jYXJ0Iiwgc2l6ZTogIjR4IiB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTkiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgIiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gRnVnYSwgbW9sZXN0aWFlIHByb3ZpZGVudCB0ZW1wb3JpYnVzIHN1bnQgZWFydW0uICIKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygiaDIiLCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiYmFkZ2UiIH0sIFtfdm0uX3YoInY1MmdzMSIpXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtZm9vdGVyIiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAianVzdGlmeS1jb250ZW50LWNlbnRlciIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygibWRiLWJ0biIsIHsgYXR0cnM6IHsgY29sb3I6ICJkYW5nZXIiIH0gfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBHZXQgaXQgbm93ICIpLAogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtZ2VtIHRleHQtd2hpdGUgbWwtMSIgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG91dGxpbmU6ICJkYW5nZXIiIH0sCiAgICAgICAgICAgICAgICAgICAgbmF0aXZlT246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDE3ID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIk5vLCB0aGFua3MiKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgIm1kYi1tb2RhbCIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgc2l6ZTogIndhcm5pbmciLAogICAgICAgICAgICAgIHBvc2l0aW9uOiAibm90aWZ5IiwKICAgICAgICAgICAgICBzaG93OiBfdm0uc2hvd01vZGFsMTgKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsMTggPSBmYWxzZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoIm1kYi1tb2RhbC1oZWFkZXIiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC13aGl0ZSIgfSwgWwogICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmcgbGVhZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJNb2RhbCBXYXJuaW5nIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoIm1kYi1tb2RhbC1ib2R5IiwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC0zIHRleHQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctZmx1aWQgei1kZXB0aC0xLWhhbGYgcm91bmRlZC1jaXJjbGUiLAogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL21kYm9vdHN0cmFwLmNvbS9pbWcvUGhvdG9zL0F2YXRhcnMvaW1nJTIwKDEpLmpwZyIsCiAgICAgICAgICAgICAgICAgICAgICBhbHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNaWNoYWwgU3p5bWFuc2tpIC0gZm91bmRlciBvZiBNYXRlcmlhbCBEZXNpZ24gZm9yIEJvb3RzdHJhcCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNTdHlsZTogeyBoZWlnaHQ6ICIxMHB4IiB9IH0pLAogICAgICAgICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSBtYi0wIiB9LCBbX3ZtLl92KCJKYW5lIildKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInAiLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1tdXRlZCIsCiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiZm9udC1zaXplIjogIjEzcHgiIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkNvbnN1bHRhbnQiKV0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC05IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICIgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIEZ1Z2EsIG1vbGVzdGlhZSBwcm92aWRlbnQgdGVtcG9yaWJ1cyBzdW50IGVhcnVtLiAiCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgIkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1tb2RhbC1mb290ZXIiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJtZGItYnRuIiwgeyBhdHRyczogeyBjb2xvcjogIndhcm5pbmciIH0gfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBHZXQgaXQgbm93ICIpLAogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtZ2VtIHRleHQtd2hpdGUgbWwtMSIgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG91dGxpbmU6ICJ3YXJuaW5nIiB9LAogICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwxOCA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJObywgdGhhbmtzIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbW9kYWwiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogeyBjYXNjYWRlOiAiIiwgc2hvdzogX3ZtLnNob3dNb2RhbDE5IH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDE5ID0gZmFsc2UKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtaGVhZGVyIiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibGlnaHQtYmx1ZSBkYXJrZW4tMyB0ZXh0LXdoaXRlIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJoNCIsIHt9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1wZW5jaWwiIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBDb250YWN0IGZvcm0iKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJtZGItbW9kYWwtYm9keSIsCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoIm1kYi1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJncmV5LXRleHQiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIGxhYmVsOiAiWW91ciBuYW1lIiwgaWNvbjogInVzZXIiIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoIm1kYi1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJncmV5LXRleHQiLAogICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIGxhYmVsOiAiWW91ciBlbWFpbCIsIGljb246ICJlbnZlbG9wZSIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygibWRiLWlucHV0IiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImdyZXktdGV4dCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiwgbGFiZWw6ICJZb3VyIHBhc3N3b3JkIiwgaWNvbjogInRhZyIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygibWRiLXRleHRhcmVhIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImdyZXktdGV4dCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvd3M6IDQsIGxhYmVsOiAiTWVzc2FnZSIsIGljb246ICJwZW5jaWwtYWx0IiB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLW1vZGFsLWZvb3RlciIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImp1c3RpZnktY29udGVudC1jZW50ZXIiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAiaW5mbyIsIGljb246ICJwYXBlci1wbGFuZSIsIGljb25SaWdodDogIiIgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJTZW5kIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbW9kYWwiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogeyBzaG93OiBfdm0uc2hvd01vZGFsMjAsIGNhc2NhZGU6ICIiLCB0YWJzOiAiIiB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwyMCA9IGZhbHNlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLXRhYiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsaWdodC1ibHVlIGRhcmtlbi0zIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRhYnM6ICIiLCBqdXN0aWZ5OiAiIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi10YWItaXRlbSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBhY3RpdmU6IF92bS50YWJzID09IDEgfSwKICAgICAgICAgICAgICAgICAgICBuYXRpdmVPbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICAgICAgICBfdm0udGFicyA9IDEKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygibWRiLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1yLTEiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogInVzZXIiIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkxvZ2luICIpCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi10YWItaXRlbSIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBhY3RpdmU6IF92bS50YWJzID09IDIgfSwKICAgICAgICAgICAgICAgICAgICBuYXRpdmVPbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICAgICAgICBfdm0udGFicyA9IDIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygibWRiLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1yLTEiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWNvbjogInVzZXItcGx1cyIgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiUmVnaXN0ZXIgIikKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfdm0udGFicyA9PSAxCiAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1tb2RhbC1ib2R5IiwKICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm14LTMiIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygibWRiLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi01IiwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAiWW91ciBlbWFpbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICJlbnZlbG9wZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJlbWFpbCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygibWRiLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICJZb3VyIHBhc3N3b3JkIiwKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogImxvY2siLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAicGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtdC0yIHRleHQtY2VudGVyIiB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBjb2xvcjogImluZm8iIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBMb2cgaW4gIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWljb24iLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWwtMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246ICJzaWduLWluLWFsdCIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICBfdm0udGFicyA9PSAxCiAgICAgICAgICAgICAgPyBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1tb2RhbC1mb290ZXIiLAogICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGNlbnRlcjogIiIgfSB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJvcHRpb25zIHRleHQtY2VudGVyIHRleHQtbWQtcmlnaHQgbXQtMSIgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgTm90IGEgbWVtYmVyPyAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnRhYnMgPSAyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiU2lnbiBVcCIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEZvcmdvdCAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiMiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJQYXNzd29yZD8iKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtbC1hdXRvIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgb3V0bGluZTogImluZm8iIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDIwID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJDbG9zZSIpXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgIF92bS50YWJzID09IDIKICAgICAgICAgICAgICA/IF9jKAogICAgICAgICAgICAgICAgICAibWRiLW1vZGFsLWJvZHkiLAogICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibXgtMyIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJtZGItaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTUiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICJZb3VyIGVtYWlsIiwKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogImVudmVsb3BlIiwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImVtYWlsIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJtZGItaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1iLTUiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICJZb3VyIHBhc3N3b3JkIiwKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogImxvY2siLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAicGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAiUmVwZWF0IHBhc3N3b3JkIiwKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogImxvY2siLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAicGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtdC0yIHRleHQtY2VudGVyIiB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBjb2xvcjogImluZm8iIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBTaWduIFVwICIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1pY29uIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1sLTEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiAic2lnbi1pbi1hbHQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgX3ZtLnRhYnMgPT0gMgogICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICJtZGItbW9kYWwtZm9vdGVyIiwKICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBjZW50ZXI6ICIiIH0gfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAib3B0aW9ucyB0ZXh0LWNlbnRlciB0ZXh0LW1kLXJpZ2h0IG10LTEiIH0sCiAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEFscmVhZHkgaGF2ZSBhbiBhY2NvdW50PyAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnRhYnMgPSAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiTG9nIGluIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibWwtYXV0byIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IG91dGxpbmU6ICJpbmZvIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVPbjogewogICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwyMCA9IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiQ2xvc2UiKV0KICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAibWRiLW1vZGFsIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsgY2FzY2FkZTogIiIsIHNob3c6IF92bS5zaG93TW9kYWwyMSB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwyMSA9IGZhbHNlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLW1vZGFsLWhlYWRlciIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImxpZ2h0LWJsdWUgZGFya2VuLTMgdGV4dC13aGl0ZSIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaDQiLCB7fSwgWwogICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtbmV3c3BhcGVyLW8iIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBTdWJzY3JpcHRpb24gZm9ybSIpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1tb2RhbC1ib2R5IiwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygibWRiLWlucHV0IiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImdyZXktdGV4dCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiwgbGFiZWw6ICJZb3VyIG5hbWUiLCBpY29uOiAidXNlciIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygibWRiLWlucHV0IiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImdyZXktdGV4dCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiwgbGFiZWw6ICJZb3VyIGVtYWlsIiwgaWNvbjogImVudmVsb3BlIiB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAibWRiLW1vZGFsLWZvb3RlciIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImp1c3RpZnktY29udGVudC1jZW50ZXIiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBjb2xvcjogImluZm8iLCBpY29uOiAiY2hlY2siLCBpY29uUmlnaHQ6ICIiIH0gfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiU3VibWl0IildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJtZGItbW9kYWwiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGNhc2NhZGU6ICIiLAogICAgICAgICAgICAgIHNpemU6ICJzbSIsCiAgICAgICAgICAgICAgcG9zaXRpb246ICJhdmF0YXIiLAogICAgICAgICAgICAgIHNob3c6IF92bS5zaG93TW9kYWwyMgogICAgICAgICAgICB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsb3NlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwyMiA9IGZhbHNlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygibWRiLW1vZGFsLWhlYWRlciIsIHsgYXR0cnM6IHsgY2xvc2U6IGZhbHNlIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInJvdW5kZWQtY2lyY2xlIGltZy1mbHVpZCIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWRib290c3RyYXAuY29tL2ltZy9QaG90b3MvQXZhdGFycy9pbWclMjAlMjgxJTI5LmpwZyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgIm1kYi1tb2RhbC1ib2R5IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogIm10LTEgbWItMiIgfSwgW192bS5fdigiTWFyaWEgRG9lIildKSwKICAgICAgICAgICAgICAgIF9jKCJtZGItaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZ3JleS10ZXh0IiwKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInBhc3N3b3JkIiwgbGFiZWw6ICJFbnRlciBwYXNzd29yZCIgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGNvbG9yOiAiaW5mbyIsIGljb246ICJzaWduIiwgaWNvblJpZ2h0OiAiIiB9IH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkxvZ2luIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdLAogICAgICAxCiAgICApLAogICAgX2MoInNlY3Rpb24iLCBbCiAgICAgIF9jKCJzZWN0aW9uIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImg0IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtYi01IG10LTQgZGFyay1ncmV5LXRleHQgdGV4dC1jZW50ZXIgZm9udC13ZWlnaHQtYm9sZCIKICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIlBvc2l0aW9uICYgU2l6ZXMiKV0pXQogICAgICAgICksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciBtYi01IiB9LCBbCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJsZWFkIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiQ2xpY2sgYnV0dG9ucyBiZWxvdyB0byBsYXVuY2ggbW9kYWxzIGRlbW8iKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMyIgfSwgWwogICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIgbWItMyIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiRnJhbWUgTW9kYWwiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCB6LWRlcHRoLTEiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6ICJodHRwczovL21kYm9vdHN0cmFwLmNvbS9pbWcvYnJhbmRmbG93L21vZGFsNC5qcGciLAogICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAibXktMyIgfSwgW192bS5fdigiUG9zaXRpb24iKV0pLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIgfSwKICAgICAgICAgICAgICAgICAgICBuYXRpdmVPbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiVG9wIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJwcmltYXJ5IiB9LAogICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwyID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiQm90dG9tIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMyIgfSwgWwogICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIgbWItMyIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiU2lkZSBNb2RhbCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIHotZGVwdGgtMSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzogImh0dHBzOi8vbWRib290c3RyYXAuY29tL2ltZy9icmFuZGZsb3cvbW9kYWwzLmpwZyIsCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJteS0zIiB9LCBbX3ZtLl92KCJQb3NpdGlvbiIpXSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJwcmltYXJ5IiB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwzID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiVG9wIHJpZ2h0IildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJwcmltYXJ5IiB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWw0ID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiVG9wIGxlZnQiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBjb2xvcjogInByaW1hcnkiIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDUgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJCb3R0b20gcmlnaHQiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBjb2xvcjogInByaW1hcnkiIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDYgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJCb3R0b20gbGVmdCIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMyIgfSwgWwogICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIgbWItMyIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiQ2VudHJhbCBNb2RhbCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIHotZGVwdGgtMSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzogImh0dHBzOi8vbWRib290c3RyYXAuY29tL2ltZy9icmFuZGZsb3cvbW9kYWwyLmpwZyIsCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJteS0zIiB9LCBbX3ZtLl92KCJTaXplIildKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBjb2xvcjogInByaW1hcnkiIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDcgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJTbWFsbCIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsOCA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIk1lZGl1bSIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGNvbG9yOiAicHJpbWFyeSIgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsOSA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkxhcmdlIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJwcmltYXJ5IiB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwxMCA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkZsdWlkIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoImJyIikKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC0zIiB9LCBbCiAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciBtYi0zIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJGbHVpZCBNb2RhbCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIHotZGVwdGgtMSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzogImh0dHBzOi8vbWRib290c3RyYXAuY29tL2ltZy9icmFuZGZsb3cvbW9kYWwxLmpwZyIsCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJteS0zIiB9LCBbX3ZtLl92KCJQb3NpdGlvbiIpXSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJwcmltYXJ5IiB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwxMSA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlJpZ2h0IildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJwcmltYXJ5IiB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwxMiA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkxlZnQiKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBjb2xvcjogInByaW1hcnkiIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDEzID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiVG9wIildCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJwcmltYXJ5IiB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwxNCA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkJvdHRvbSIpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJociIsIHsgc3RhdGljQ2xhc3M6ICJteS01IiB9KSwKICAgICAgX2MoInNlY3Rpb24iLCBbCiAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogIm15LTUgbXQtNCBkYXJrLWdyZXktdGV4dCB0ZXh0LWNlbnRlciIgfSwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlN0eWxlcyBleGFtcGxlcyIpXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNiIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogInByaW1hcnkiLAogICAgICAgICAgICAgICAgICAgICAgcm91bmRlZDogIiIsCiAgICAgICAgICAgICAgICAgICAgICBpY29uOiAiZXllIiwKICAgICAgICAgICAgICAgICAgICAgIGljb25SaWdodDogIiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwxNSA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkxhdW5jaCBNb2RhbCBTdWNjZXNzIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibW9kYWwtZGlhbG9nIG1vZGFsLW5vdGlmeSBtb2RhbC1zdWNjZXNzIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvbGU6ICJkb2N1bWVudCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtaGVhZGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyBsZWFkIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIk1vZGFsIFN1Y2Nlc3MiKQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY2xvc2UiLAogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLWRpc21pc3MiOiAibW9kYWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJhcmlhLWxhYmVsIjogIkNsb3NlIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAic3BhbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ3aGl0ZS10ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7ICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCLDlyIpXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1ib2R5IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZmFzIGZhLWNoZWNrIGZhLTR4IG1iLTMgYW5pbWF0ZWQgcm90YXRlSW4iCiAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gSW1wZWRpdCBpdXN0byBudWxsYSBhcGVyaWFtIGJsYW5kaXRpaXMgYWQgY29uc2VxdWF0dXIgaW4gZG9sb3JlcyBjdWxwYSwgZGlnbmlzc2ltb3MsIGVpdXMgbm9uIHBvc3NpbXVzIGZ1Z2lhdC4gRXNzZSByYXRpb25lIGZ1Z2EsIGVuaW0sIGFiIG9mZmljaWlzIHRvdGFtLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1mb290ZXIganVzdGlmeS1jb250ZW50LWNlbnRlciIgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXN1Y2Nlc3MgcHgtMyBweC0zIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAiYnV0dG9uIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBHZXQgaXQgbm93ICIpLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS1nZW0gdGV4dC13aGl0ZSBtbC0xIiB9KQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgImJ0biBidG4tb3V0bGluZS1zdWNjZXNzIHdhdmVzLWVmZmVjdCBweC0zIHB4LTMiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJidXR0b24iLCAiZGF0YS1kaXNtaXNzIjogIm1vZGFsIiB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIk5vLCB0aGFua3MiKV0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTYiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICJwcmltYXJ5IiwKICAgICAgICAgICAgICAgICAgICAgIHJvdW5kZWQ6ICIiLAogICAgICAgICAgICAgICAgICAgICAgaWNvbjogImV5ZSIsCiAgICAgICAgICAgICAgICAgICAgICBpY29uUmlnaHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBuYXRpdmVPbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsMTYgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJMYXVuY2ggTW9kYWwgSW5mbyIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1vZGFsLWRpYWxvZyBtb2RhbC1ub3RpZnkgbW9kYWwtaW5mbyIsCiAgICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiAiZG9jdW1lbnQiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWhlYWRlciIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmcgbGVhZCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJNb2RhbCBJbmZvIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNsb3NlIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YS1kaXNtaXNzIjogIm1vZGFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiYXJpYS1sYWJlbCI6ICJDbG9zZSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAid2hpdGUtdGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiw5ciKV0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgImh0dHBzOi8vbWRib290c3RyYXAuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE2LzExL2FkbWluLWRhc2hib2FyZC1ib290c3RyYXAuanBnIiwKICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgIiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gTmVzY2l1bnQgdmVybyBpbGxvIGVycm9yIGV2ZW5pZXQgY3VtLiAiCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1mb290ZXIganVzdGlmeS1jb250ZW50LWNlbnRlciIgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLWluZm8gcHgtMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgR2V0IGl0IG5vdyAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtZ2VtIHRleHQtd2hpdGUgbWwtMSIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tb3V0bGluZS1pbmZvIHdhdmVzLWVmZmVjdCBweC0zIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAiYnV0dG9uIiwgImRhdGEtZGlzbWlzcyI6ICJtb2RhbCIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJObywgdGhhbmtzIildCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNiIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogInByaW1hcnkiLAogICAgICAgICAgICAgICAgICAgICAgcm91bmRlZDogIiIsCiAgICAgICAgICAgICAgICAgICAgICBpY29uOiAiZXllIiwKICAgICAgICAgICAgICAgICAgICAgIGljb25SaWdodDogIiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG5hdGl2ZU9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwxNyA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkxhdW5jaCBNb2RhbCBEYW5nZXIiKV0KICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtb2RhbC1kaWFsb2cgbW9kYWwtbm90aWZ5IG1vZGFsLWRhbmdlciIsCiAgICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiAiZG9jdW1lbnQiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWhlYWRlciIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImhlYWRpbmciIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiTW9kYWwgRGFuZ2VyIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNsb3NlIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YS1kaXNtaXNzIjogIm1vZGFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiYXJpYS1sYWJlbCI6ICJDbG9zZSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAid2hpdGUtdGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiw5ciKV0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC0zIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLXNob3BwaW5nLWNhcnQgZmEtNHgiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLTkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gRnVnYSwgbW9sZXN0aWFlIHByb3ZpZGVudCB0ZW1wb3JpYnVzIHN1bnQgZWFydW0uICIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygiaDIiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiYmFkZ2UiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigidjUyZ3MxIikKICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm1vZGFsLWZvb3RlciBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIiB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tZGFuZ2VyIHB4LTMiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJidXR0b24iIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEdldCBpdCBub3cgIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLWdlbSB0ZXh0LXdoaXRlIG1sLTEiIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYnRuIGJ0bi1vdXRsaW5lLWRhbmdlciB3YXZlcy1lZmZlY3QgcHgtMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIsICJkYXRhLWRpc21pc3MiOiAibW9kYWwiIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiTm8sIHRoYW5rcyIpXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNiIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogInByaW1hcnkiLAogICAgICAgICAgICAgICAgICAgICAgcm91bmRlZDogIiIsCiAgICAgICAgICAgICAgICAgICAgICBpY29uOiAiZXllIiwKICAgICAgICAgICAgICAgICAgICAgIGljb25SaWdodDogIiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5zaG93TW9kYWwxOCA9IHRydWUKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkxhdW5jaCBNb2RhbCBXYXJuaW5nIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibW9kYWwtZGlhbG9nIG1vZGFsLW5vdGlmeSBtb2RhbC13YXJuaW5nIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvbGU6ICJkb2N1bWVudCIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtaGVhZGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGluZyIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJNb2RhbCBXYXJuaW5nIikKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNsb3NlIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YS1kaXNtaXNzIjogIm1vZGFsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiYXJpYS1sYWJlbCI6ICJDbG9zZSIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAid2hpdGUtdGV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyAiYXJpYS1oaWRkZW4iOiAidHJ1ZSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiw5ciKV0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtYm9keSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC0zIHRleHQtY2VudGVyIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaW1nLWZsdWlkIHotZGVwdGgtMS1oYWxmIHJvdW5kZWQtY2lyY2xlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9tZGJvb3RzdHJhcC5jb20vaW1nL1Bob3Rvcy9BdmF0YXJzL2ltZyUyMCgxKS5qcGciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiTWljaGFsIFN6eW1hbnNraSAtIGZvdW5kZXIgb2YgTWF0ZXJpYWwgRGVzaWduIGZvciBCb290c3RyYXAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljU3R5bGU6IHsgaGVpZ2h0OiAiMTBweCIgfSB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUgbWItMCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiSmFuZSIpCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAicCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZXh0LW11dGVkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJmb250LXNpemUiOiAiMTNweCIgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiIENvbnN1bHRhbnQgIildCiAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtOSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBGdWdhLCBtb2xlc3RpYWUgcHJvdmlkZW50IHRlbXBvcmlidXMgc3VudCBlYXJ1bS4gIgogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImNhcmQtdGV4dCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1mb290ZXIganVzdGlmeS1jb250ZW50LWNlbnRlciIgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXdhcm5pbmcgcHgtMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgR2V0IGl0IG5vdyAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtZ2VtIHRleHQtd2hpdGUgbWwtMSIgfSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJidG4gYnRuLW91dGxpbmUtd2FybmluZyB3YXZlcy1lZmZlY3QgcHgtMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImJ1dHRvbiIsICJkYXRhLWRpc21pc3MiOiAibW9kYWwiIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiTm8sIHRoYW5rcyIpXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJociIsIHsgc3RhdGljQ2xhc3M6ICJteS01IiB9KSwKICAgICAgX2MoInNlY3Rpb24iLCBbCiAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogIm15LTUgbXQtNCBkYXJrLWdyZXktdGV4dCB0ZXh0LWNlbnRlciIgfSwgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkZvcm1zIEV4YW1wbGVzIildKQogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC02IiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAicHJpbWFyeSIsCiAgICAgICAgICAgICAgICAgICAgICByb3VuZGVkOiAiIiwKICAgICAgICAgICAgICAgICAgICAgIGljb246ICJleWUiLAogICAgICAgICAgICAgICAgICAgICAgaWNvblJpZ2h0OiAiIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDE5ID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiTGF1bmNoIE1vZGFsIENvbnRhY3QgRm9ybSIpXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1vZGFsLWRpYWxvZyBjYXNjYWRpbmctbW9kYWwiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgcm9sZTogImRvY3VtZW50IiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtb2RhbC1oZWFkZXIgbGlnaHQtYmx1ZSBkYXJrZW4tMyB3aGl0ZS10ZXh0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImg0Iiwge30sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLXBlbmNpbC1hbHQiIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBDb250YWN0IGZvcm0iKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNsb3NlIHdhdmVzLWVmZmVjdCB3YXZlcy1saWdodCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtZGlzbWlzcyI6ICJtb2RhbCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYXJpYS1sYWJlbCI6ICJDbG9zZSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsgYXR0cnM6IHsgImFyaWEtaGlkZGVuIjogInRydWUiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCLDlyIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm1vZGFsLWJvZHkgbWItMCIgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICJzbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogImVudmVsb3BlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogIllvdXIgbmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAic20iLAogICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICJsb2NrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogIllvdXIgZW1haWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJlbWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICJzbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogInRhZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICJTdWJqZWN0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dCIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICJzbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogInBlbmNpbC1hbHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAiWW91ciBtZXNzYWdlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAidGV4dGFyZWEiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJvd3M6IDMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciBtdC0xLWhhbGYiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAicGFwZXItcGxhbmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25SaWdodDogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICJpbmZvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiU2VuZCIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC02IiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAicHJpbWFyeSIsCiAgICAgICAgICAgICAgICAgICAgICByb3VuZGVkOiAiIiwKICAgICAgICAgICAgICAgICAgICAgIGljb246ICJleWUiLAogICAgICAgICAgICAgICAgICAgICAgaWNvblJpZ2h0OiAiIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDIwID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiTGF1bmNoIE1vZGFsIExvZ2luL1JlZ2lzdGVyIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibW9kYWwtZGlhbG9nIGNhc2NhZGluZy1tb2RhbCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiAiZG9jdW1lbnQiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWMtdGFicyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgInVsIiwKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYgbWQtdGFicyB0YWJzLTIgbGlnaHQtYmx1ZSBkYXJrZW4tMyIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvbGU6ICJ0YWJsaXN0IiB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayBhY3RpdmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLXRvZ2dsZSI6ICJ0YWIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6ICIjcGFuZWwxIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlOiAidGFiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtdXNlciBtci0xIiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgTG9naW4gIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY0NsYXNzOiAibmF2LWl0ZW0iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJuYXYtbGluayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRhdGEtdG9nZ2xlIjogInRhYiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogIiNwYW5lbDIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGU6ICJ0YWIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogImZhcyBmYS11c2VyLXBsdXMgbXItMSIgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFJlZ2lzdGVyICIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0YWItY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0YWItcGFuZSBmYWRlIGluIHNob3cgYWN0aXZlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogInBhbmVsMSIsIHJvbGU6ICJ0YWJwYW5lbCIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1ib2R5IG1iLTEiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJtZGItaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICJzbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAiZW52ZWxvcGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICJZb3VyIGVtYWlsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJlbWFpbCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibWRiLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAic20iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogImxvY2siLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICJQYXNzd29yZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAicGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIG10LTIiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtZGItYnRuIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAicGFwZXItcGxhbmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvblJpZ2h0OiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAiaW5mbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIkxvZyBpbiIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1mb290ZXIgZGlzcGxheS1mb290ZXIiIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAib3B0aW9ucyB0ZXh0LWNlbnRlciB0ZXh0LW1kLXJpZ2h0IG10LTEiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgTm90IGEgbWVtYmVyPyAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYmx1ZS10ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJTaWduIFVwIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIEZvcmdvdCAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYmx1ZS10ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJQYXNzd29yZD8iKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYnRuIGJ0bi1vdXRsaW5lLWluZm8gd2F2ZXMtZWZmZWN0cyBtbC1hdXRvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YS1kaXNtaXNzIjogIm1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiIENsb3NlICIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0YWItcGFuZSBmYWRlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBpZDogInBhbmVsMiIsIHJvbGU6ICJ0YWJwYW5lbCIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1ib2R5IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1kLWZvcm0gZm9ybS1zbSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZhcyBmYS1lbnZlbG9wZSBwcmVmaXgiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wgZm9ybS1jb250cm9sLXNtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIsIGlkOiAiZm9ybTEzIiB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygibGFiZWwiLCB7IGF0dHJzOiB7IGZvcjogImZvcm0xMyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJZb3VyIGVtYWlsIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZC1mb3JtIGZvcm0tc20iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAiZmFzIGZhLWxvY2sgcHJlZml4IiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogInBhc3N3b3JkIiwgaWQ6ICJmb3JtMjQiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJsYWJlbCIsIHsgYXR0cnM6IHsgZm9yOiAiZm9ybTI0IiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIllvdXIgcGFzc3dvcmQiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1kLWZvcm0gZm9ybS1zbSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtbG9jayBwcmVmaXgiIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmb3JtLWNvbnRyb2wgZm9ybS1jb250cm9sLXNtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiAicGFzc3dvcmQiLCBpZDogImZvcm0xNSIgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImxhYmVsIiwgeyBhdHRyczogeyBmb3I6ICJmb3JtMTUiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUmVwZWF0IHBhc3N3b3JkIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIgZm9ybS1zbSBtdC0yIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImJ1dHRvbiIsIHsgc3RhdGljQ2xhc3M6ICJidG4gYnRuLWluZm8iIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiIFNpZ24gdXAgIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJmYXMgZmEtc2lnbi1pbiBtbC0xIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1mb290ZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAib3B0aW9ucyB0ZXh0LXJpZ2h0IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInB0LTEiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBBbHJlYWR5IGhhdmUgYW4gYWNjb3VudD8gIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYmx1ZS10ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiMiIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJMb2cgSW4iKV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImJ0biBidG4tb3V0bGluZS1pbmZvIHdhdmVzLWVmZmVjdCBtbC1hdXRvIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogImJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGF0YS1kaXNtaXNzIjogIm1vZGFsIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigiIENsb3NlICIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTYiIH0sIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICJwcmltYXJ5IiwKICAgICAgICAgICAgICAgICAgICAgIHJvdW5kZWQ6ICIiLAogICAgICAgICAgICAgICAgICAgICAgaWNvbjogImV5ZSIsCiAgICAgICAgICAgICAgICAgICAgICBpY29uUmlnaHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd01vZGFsMjEgPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KCJMYXVuY2ggTW9kYWwgQ29udGFjdCBGb3JtIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibW9kYWwtZGlhbG9nIGNhc2NhZGluZy1tb2RhbCIsCiAgICAgICAgICAgICAgICBhdHRyczogeyByb2xlOiAiZG9jdW1lbnQiIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibW9kYWwtY29udGVudCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm1vZGFsLWhlYWRlciBsaWdodC1ibHVlIGRhcmtlbi0zIHdoaXRlLXRleHQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiaDQiLCB7fSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXIgZmEtbmV3c3BhcGVyIiB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgU3Vic2NyaXB0aW9uIGZvcm0gIikKICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjbG9zZSB3YXZlcy1lZmZlY3Qgd2F2ZXMtbGlnaHQiLAogICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYnV0dG9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkYXRhLWRpc21pc3MiOiAibW9kYWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImFyaWEtbGFiZWwiOiAiQ2xvc2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IGF0dHJzOiB7ICJhcmlhLWhpZGRlbiI6ICJ0cnVlIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiw5ciKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1ib2R5IG1iLTAiIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAic20iLAogICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICJ1c2VyIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogIllvdXIgbmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoIm1kYi1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAic20iLAogICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICJlbnZlbG9wZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICJZb3VyIGVtYWlsIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAiZW1haWwiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIgbXQtMS1oYWxmIiB9LAogICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibWRiLWJ0biIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogImNoZWNrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogImluZm8iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb25SaWdodDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIlN1Ym1pdCIpXQogICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC02IiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIm1kYi1idG4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAicHJpbWFyeSIsCiAgICAgICAgICAgICAgICAgICAgICByb3VuZGVkOiAiIiwKICAgICAgICAgICAgICAgICAgICAgIGljb246ICJleWUiLAogICAgICAgICAgICAgICAgICAgICAgaWNvblJpZ2h0OiAiIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgbmF0aXZlT246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dNb2RhbDIyID0gdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdigiTGF1bmNoIE1vZGFsIExvZ2luIHdpdGggQXZhdGFyIildCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgICAibW9kYWwtZGlhbG9nIG1vZGFsLXNtIGNhc2NhZGluZy1tb2RhbCBtb2RhbC1hdmF0YXIiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgcm9sZTogImRvY3VtZW50IiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1vZGFsLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1oZWFkZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyb3VuZGVkLWNpcmNsZSBpbWctZmx1aWQiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICJodHRwczovL21kYm9vdHN0cmFwLmNvbS9pbWcvUGhvdG9zL0F2YXRhcnMvaW1nJTIwJTI4MSUyOS5qcGciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtb2RhbC1ib2R5IHRleHQtY2VudGVyIG1iLTEiIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogIm10LTEgbWItMiIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIk1hcmlhIERvZSIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJtZGItaW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogInNtIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogIkVudGVyIHBhc3N3b3JkIiwKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAicGFzc3dvcmQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWNlbnRlciBwdC00IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJidXR0b24iLCB7IHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1jeWFuIG10LTEiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIiBMb2dpbiAiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJmYXMgZmEtc2lnbi1pbiBtbC0xIiB9KQogICAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pLAogICAgX2MoInNlY3Rpb24iLCB7IHN0YXRpY0NsYXNzOiAicGItNCBwdC01IiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZCB0ZXh0LWNlbnRlciIgfSwgWwogICAgICAgIF9jKCJoMyIsIHsgc3RhdGljQ2xhc3M6ICJjYXJkLWhlYWRlciBwcmltYXJ5LWNvbG9yIHdoaXRlLXRleHQiIH0sIFsKICAgICAgICAgIF92bS5fdigiRnVsbCBkb2N1bWVudGF0aW9uIikKICAgICAgICBdKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC10ZXh0IiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiIFJlYWQgdGhlIGZ1bGwgZG9jdW1lbnRhdGlvbiBmb3IgdGhlc2UgY29tcG9uZW50cy4gIikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuIGJ0bi1wcmltYXJ5IiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vbWRib290c3RyYXAuY29tL2RvY3MvdnVlL21vZGFscy9iYXNpYy8iLAogICAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiTGVhcm4gbW9yZSIpXQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}