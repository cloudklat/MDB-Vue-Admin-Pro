{"remainingRequest":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\src\\components\\pages\\About.vue?vue&type=template&id=1359eafc&scoped=true&","dependencies":[{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\src\\components\\pages\\About.vue","mtime":1585101964000},{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImZ1bGxzY3JlZW4iPgogIDxtZGItbmF2YmFyCiAgICBwb3NpdGlvbj0idG9wIgogICAgY29sb3I9Im1kYiIKICAgIGRhcmsKICAgIHNjcm9sbGluZwogICAgdHJhbnNwYXJlbnQKICA+CiAgICA8bWRiLW5hdmJhci1icmFuZCBocmVmPSIjIj48c3Ryb25nPk1EQjwvc3Ryb25nPjwvbWRiLW5hdmJhci1icmFuZD4KICAgIDxtZGItbmF2YmFyLXRvZ2dsZXI+CiAgICAgIDxtZGItbmF2YmFyLW5hdj4KICAgICAgICA8bWRiLW5hdi1pdGVtIGhyZWY9IiNob21lIiB3YXZlcy1maXhlZCBhY3RpdmU+SG9tZTwvbWRiLW5hdi1pdGVtPgogICAgICAgIDxtZGItbmF2LWl0ZW0gaHJlZj0iI3RlYW0iIHdhdmVzLWZpeGVkPlRlYW08L21kYi1uYXYtaXRlbT4KICAgICAgICA8bWRiLW5hdi1pdGVtIGhyZWY9IiNwcm9kdWN0cyIgd2F2ZXMtZml4ZWQ+UHJvZHVjdHM8L21kYi1uYXYtaXRlbT4KICAgICAgICA8bWRiLW5hdi1pdGVtIGhyZWY9IiNnYWxsZXJ5IiB3YXZlcy1maXhlZD5HYWxsZXJ5PC9tZGItbmF2LWl0ZW0+CiAgICAgICAgPG1kYi1uYXYtaXRlbSBocmVmPSIjY29udGFjdCIgd2F2ZXMtZml4ZWQ+Q29udGFjdDwvbWRiLW5hdi1pdGVtPgogICAgICA8L21kYi1uYXZiYXItbmF2PgogICAgICA8IS0tIFNlYXJjaCBmb3JtIC0tPgogICAgICA8Zm9ybT4KICAgICAgICA8bWRiLWlucHV0CiAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgY2xhc3M9InRleHQtd2hpdGUiCiAgICAgICAgICBwbGFjZWhvbGRlcj0iU2VhcmNoIgogICAgICAgICAgYXJpYS1sYWJlbD0iU2VhcmNoIgogICAgICAgICAgbGFiZWwKICAgICAgICAgIG5hdklucHV0CiAgICAgICAgICB3YXZlcwogICAgICAgICAgd2F2ZXMtZml4ZWQKICAgICAgICAvPgogICAgICA8L2Zvcm0+CiAgICA8L21kYi1uYXZiYXItdG9nZ2xlcj4KICA8L21kYi1uYXZiYXI+CgogIDwhLS0gSW50cm8gU2VjdGlvbiAtLT4KICA8ZGl2CiAgICBpZD0iaG9tZSIKICAgIGNsYXNzPSJ2aWV3IgogICAgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybChodHRwczovL21kYm9vdHN0cmFwLmNvbS9pbWcvUGhvdG9zL090aGVycy9pbWclMjAlMjg1MyUyOS5qcGcpOyBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OyBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyOyBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyOyIKICA+CiAgICA8ZGl2IGNsYXNzPSJtYXNrIHJnYmEtc3R5bGlzaC1saWdodCI+CiAgICAgIDxkaXYKICAgICAgICBjbGFzcz0iY29udGFpbmVyIGgtMTAwIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIGFsaWduLWl0ZW1zLWNlbnRlciIKICAgICAgPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyBwdC01IG10LTMiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIG1iLTMiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbnRyby1pbmZvLWNvbnRlbnQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgIDxoMQogICAgICAgICAgICAgICAgY2xhc3M9ImRpc3BsYXktMyB3aGl0ZS10ZXh0IG1iLTUgd293IGZhZGVJbkRvd24iCiAgICAgICAgICAgICAgICBkYXRhLXdvdy1kZWxheT0iMC4zcyIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICBBQk9VVCA8YSBjbGFzcz0id2hpdGUtdGV4dCBmb250LXdlaWdodC1ib2xkIj5VUzwvYT4KICAgICAgICAgICAgICA8L2gxPgogICAgICAgICAgICAgIDxoNQogICAgICAgICAgICAgICAgY2xhc3M9InRleHQtdXBwZXJjYXNlIHdoaXRlLXRleHQgbWItNSBmb250LXdlaWdodC1ib2xkIHdvdyBmYWRlSW5Eb3duIgogICAgICAgICAgICAgICAgZGF0YS13b3ctZGVsYXk9IjAuM3MiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQgY29uc2VjdGV0dXIuCiAgICAgICAgICAgICAgPC9oNT4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgY2xhc3M9ImJ0biBidG4tbGlnaHQtYmx1ZSBidG4tbGcgd293IGZhZGVJbkRvd24iCiAgICAgICAgICAgICAgICBkYXRhLXdvdy1kZWxheT0iMC4zcyIKICAgICAgICAgICAgICAgID5wb3J0Zm9saW88L2EKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLWluZGlnbyBidG4tbGcgd293IGZhZGVJbkRvd24iCiAgICAgICAgICAgICAgICBkYXRhLXdvdy1kZWxheT0iMC4zcyIKICAgICAgICAgICAgICAgID5BYm91dDwvYQogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KCiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDwhLS0gU2VjdGlvbjogVGVhbSB2LjMgLS0+CiAgICA8c2VjdGlvbgogICAgICBpZD0idGVhbSIKICAgICAgY2xhc3M9InNlY3Rpb24gdGVhbS1zZWN0aW9uIHBiLTQgd293IGZhZGVJbiIKICAgICAgZGF0YS13b3ctZGVsYXk9IjAuM3MiCiAgICA+CiAgICAgIDwhLS0gU2VjdGlvbiBoZWFkaW5nIC0tPgogICAgICA8aDIgY2xhc3M9InRleHQtY2VudGVyIG15LTUgaDEiPk91ciBhbWF6aW5nIHRlYW08L2gyPgogICAgICA8IS0tIFNlY3Rpb24gZGVzY3JpcHRpb24gLS0+CiAgICAgIDxwIGNsYXNzPSJ0ZXh0LWNlbnRlciBtYi01IHctcmVzcG9uc2l2ZSBteC1hdXRvIj4KICAgICAgICBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4gRnVnaXQsIGVycm9yCiAgICAgICAgYW1ldCBudW1xdWFtIGl1cmUgcHJvdmlkZW50IHZvbHVwdGF0ZSBlc3NlIHF1YXNpLCB2ZXJpdGF0aXMgdG90YW0KICAgICAgICB2b2x1cHRhcyBub3N0cnVtIHF1aXNxdWFtIGV1bSBwb3JybyBhIHBhcmlhdHVyIGFjY3VzYW11cyB2ZW5pYW0uCiAgICAgIDwvcD4KCiAgICAgIDwhLS0gR3JpZCByb3cgLS0+CiAgICAgIDxkaXYgY2xhc3M9InJvdyBtYi1sZy00IHRleHQtY2VudGVyIHRleHQtbWQtbGVmdCI+CiAgICAgICAgPCEtLSBHcmlkIGNvbHVtbiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBjb2wtbWQtMTIgbWItNCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBmbG9hdC1sZWZ0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXZhdGFyIG14LWF1dG8iPgogICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZGJvb3RzdHJhcC5jb20vaW1nL1Bob3Rvcy9BdmF0YXJzL2ltZyUyMCgyNykuanBnIgogICAgICAgICAgICAgICAgY2xhc3M9InotZGVwdGgtMSIKICAgICAgICAgICAgICAgIGFsdD0iRmlyc3Qgc2FtcGxlIGF2YXRhciBpbWFnZSIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGZsb2F0LXJpZ2h0Ij4KICAgICAgICAgICAgPGg0PjxzdHJvbmc+Sm9obiBEb2U8L3N0cm9uZz48L2g0PgogICAgICAgICAgICA8aDYgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQgZ3JleS10ZXh0IG1iLTQiPldlYiBEZXNpZ25lcjwvaDY+CiAgICAgICAgICAgIDxwIGNsYXNzPSJncmV5LXRleHQiPgogICAgICAgICAgICAgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBRdW9kCiAgICAgICAgICAgICAgZW9zIGlkIG9mZmljaWlzIGhpYyB0ZW5ldHVyLgogICAgICAgICAgICA8L3A+CgogICAgICAgICAgICA8IS0tIEZhY2Vib29rIC0tPgogICAgICAgICAgICA8YSBjbGFzcz0icC0yIG0tMiBmYS1sZyBmYi1pYyIKICAgICAgICAgICAgICA+PGkgY2xhc3M9ImZhYiBmYS1mYWNlYm9vay1mIj4gPC9pCiAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgIDwhLS0gVHdpdHRlciAtLT4KICAgICAgICAgICAgPGEgY2xhc3M9InAtMiBtLTIgZmEtbGcgdHctaWMiPjxpIGNsYXNzPSJmYWIgZmEtdHdpdHRlciI+IDwvaT48L2E+CiAgICAgICAgICAgIDwhLS0gRHJpYmJibGUgLS0+CiAgICAgICAgICAgIDxhIGNsYXNzPSJwLTIgbS0yIGZhLWxnIGRyaWJiYmxlLWljIgogICAgICAgICAgICAgID48aSBjbGFzcz0iZmFiIGZhLWRyaWJiYmxlIj4gPC9pCiAgICAgICAgICAgID48L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIEdyaWQgY29sdW1uIC0tPgoKICAgICAgICA8IS0tIEdyaWQgY29sdW1uIC0tPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02IGNvbC1tZC0xMiBtYi00Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGZsb2F0LWxlZnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdmF0YXIgbXgtYXV0byI+CiAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgc3JjPSJodHRwczovL21kYm9vdHN0cmFwLmNvbS9pbWcvUGhvdG9zL0F2YXRhcnMvaW1nJTIwKDMxKS5qcGciCiAgICAgICAgICAgICAgICBjbGFzcz0iei1kZXB0aC0xIgogICAgICAgICAgICAgICAgYWx0PSJTZWNvbmQgc2FtcGxlIGF2YXRhciBpbWFnZSIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGZsb2F0LXJpZ2h0Ij4KICAgICAgICAgICAgPGg0PjxzdHJvbmc+TWFyaWEgS2F0ZTwvc3Ryb25nPjwvaDQ+CiAgICAgICAgICAgIDxoNiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCBncmV5LXRleHQgbWItNCI+UGhvdG9ncmFwaGVyPC9oNj4KICAgICAgICAgICAgPHAgY2xhc3M9ImdyZXktdGV4dCI+CiAgICAgICAgICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIFF1b2QKICAgICAgICAgICAgICBlb3MgaWQgb2ZmaWNpaXMgaGljIHRlbmV0dXIuCiAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgIDwhLS0gRmFjZWJvb2sgLS0+CiAgICAgICAgICAgIDxhIGNsYXNzPSJwLTIgbS0yIGZhLWxnIGZiLWljIgogICAgICAgICAgICAgID48aSBjbGFzcz0iZmFiIGZhLWZhY2Vib29rLWYiPiA8L2kKICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgPCEtLSBZb3VUdWJlIC0tPgogICAgICAgICAgICA8YSBjbGFzcz0icC0yIG0tMiBmYS1sZyB5dC1pYyI+PGkgY2xhc3M9ImZhYiBmYS15b3V0dWJlIj4gPC9pPjwvYT4KICAgICAgICAgICAgPCEtLSBJbnN0YWdyYW0gLS0+CiAgICAgICAgICAgIDxhIGNsYXNzPSJwLTIgbS0yIGZhLWxnIGlucy1pYyIKICAgICAgICAgICAgICA+PGkgY2xhc3M9ImZhYiBmYS1pbnN0YWdyYW0iPiA8L2kKICAgICAgICAgICAgPjwvYT4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gR3JpZCBjb2x1bW4gLS0+CiAgICAgIDwvZGl2PgogICAgICA8IS0tIEdyaWQgcm93IC0tPgoKICAgICAgPCEtLSBHcmlkIHJvdyAtLT4KICAgICAgPGRpdiBjbGFzcz0icm93IHRleHQtY2VudGVyIHRleHQtbWQtbGVmdCI+CiAgICAgICAgPCEtLSBHcmlkIGNvbHVtbiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBjb2wtbWQtMTIgbWItNCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBmbG9hdC1sZWZ0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXZhdGFyIG14LWF1dG8iPgogICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZGJvb3RzdHJhcC5jb20vaW1nL1Bob3Rvcy9BdmF0YXJzL2ltZyUyMCgyNikuanBnIgogICAgICAgICAgICAgICAgY2xhc3M9InotZGVwdGgtMSIKICAgICAgICAgICAgICAgIGFsdD0iRm91cnRoIHNhbXBsZSBhdmF0YXIgaW1hZ2UiCiAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBmbG9hdC1yaWdodCI+CiAgICAgICAgICAgIDxoND48c3Ryb25nPkFubmEgRGV5bmFoPC9zdHJvbmc+PC9oND4KICAgICAgICAgICAgPGg2IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIGdyZXktdGV4dCBtYi00Ij5XZWIgRGV2ZWxvcGVyPC9oNj4KICAgICAgICAgICAgPHAgY2xhc3M9ImdyZXktdGV4dCI+CiAgICAgICAgICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIFF1b2QKICAgICAgICAgICAgICBlb3MgaWQgb2ZmaWNpaXMgaGljIHRlbmV0dXIuCiAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgIDwhLS0gRmFjZWJvb2sgLS0+CiAgICAgICAgICAgIDxhIGNsYXNzPSJwLTIgbS0yIGZhLWxnIGZiLWljIgogICAgICAgICAgICAgID48aSBjbGFzcz0iZmFiIGZhLWZhY2Vib29rLWYiPiA8L2kKICAgICAgICAgICAgPjwvYT4KICAgICAgICAgICAgPCEtLSBUd2l0dGVyIC0tPgogICAgICAgICAgICA8YSBjbGFzcz0icC0yIG0tMiBmYS1sZyB0dy1pYyI+PGkgY2xhc3M9ImZhYiBmYS10d2l0dGVyIj4gPC9pPjwvYT4KICAgICAgICAgICAgPCEtLSBHaXRIdWIgLS0+CiAgICAgICAgICAgIDxhIGNsYXNzPSJwLTIgbS0yIGZhLWxnIGdpdC1pYyI+PGkgY2xhc3M9ImZhYiBmYS1naXRodWIiPiA8L2k+PC9hPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLSBHcmlkIGNvbHVtbiAtLT4KCiAgICAgICAgPCEtLSBHcmlkIGNvbHVtbiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbGctNiBjb2wtbWQtMTIgbWItNCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBmbG9hdC1sZWZ0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXZhdGFyIG14LWF1dG8iPgogICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgIHNyYz0iaHR0cHM6Ly9tZGJvb3RzdHJhcC5jb20vaW1nL1Bob3Rvcy9BdmF0YXJzL2ltZyUyMCgyOSkuanBnIgogICAgICAgICAgICAgICAgY2xhc3M9InotZGVwdGgtMSIKICAgICAgICAgICAgICAgIGFsdD0iRmlmdGggc2FtcGxlIGF2YXRhciBpbWFnZSIKICAgICAgICAgICAgICAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGZsb2F0LXJpZ2h0Ij4KICAgICAgICAgICAgPGg0PjxzdHJvbmc+U2FyYWggTWVseWFoPC9zdHJvbmc+PC9oND4KICAgICAgICAgICAgPGg2IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIGdyZXktdGV4dCBtYi00Ij4KICAgICAgICAgICAgICBGcm9udC1lbmQgRGV2ZWxvcGVyCiAgICAgICAgICAgIDwvaDY+CiAgICAgICAgICAgIDxwIGNsYXNzPSJncmV5LXRleHQiPgogICAgICAgICAgICAgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LiBRdW9kCiAgICAgICAgICAgICAgZW9zIGlkIG9mZmljaWlzIGhpYyB0ZW5ldHVyLgogICAgICAgICAgICA8L3A+CgogICAgICAgICAgICA8IS0tIEdvb2dsZSArIC0tPgogICAgICAgICAgICA8YSBjbGFzcz0icC0yIG0tMiBmYS1sZyBncGx1cy1pYyIKICAgICAgICAgICAgICA+PGkgY2xhc3M9ImZhYiBmYS1nb29nbGUtcGx1cy1nIj4gPC9pCiAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgIDwhLS0gTGlua2VkSW4gLS0+CiAgICAgICAgICAgIDxhIGNsYXNzPSJwLTIgbS0yIGZhLWxnIGxpLWljIgogICAgICAgICAgICAgID48aSBjbGFzcz0iZmFiIGZhLWxpbmtlZGluLWluIj4gPC9pCiAgICAgICAgICAgID48L2E+CiAgICAgICAgICAgIDwhLS0gRW1haWwgLS0+CiAgICAgICAgICAgIDxhIGNsYXNzPSJwLTIgbS0yIGZhLWxnIGVtYWlsLWljIgogICAgICAgICAgICAgID48aSBjbGFzcz0iZmFzIGZhLWVudmVsb3BlIj4gPC9pCiAgICAgICAgICAgID48L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIEdyaWQgY29sdW1uIC0tPgogICAgICA8L2Rpdj4KICAgICAgPCEtLSBHcmlkIHJvdyAtLT4KICAgIDwvc2VjdGlvbj4KICAgIDwhLS0gU2VjdGlvbjogVGVhbSB2LjMgLS0+CgogICAgPGhyIGNsYXNzPSJteS01IiAvPgoKICAgIDwhLS0gU2VjdGlvbjogRmVhdHVyZXMgdi4xIC0tPgogICAgPHNlY3Rpb24KICAgICAgaWQ9InByb2R1Y3RzIgogICAgICBjbGFzcz0idGV4dC1jZW50ZXIgd293IGZhZGVJbiIKICAgICAgZGF0YS13b3ctZGVsYXk9IjAuM3MiCiAgICA+CiAgICAgIDwhLS0gU2VjdGlvbiBoZWFkaW5nIC0tPgogICAgICA8aDEgY2xhc3M9InRleHQtY2VudGVyIG15LTUgaDEiPldlIGNyZWF0ZSBhd2Vzb21lIHByb2R1Y3RzPC9oMT4KICAgICAgPCEtLSBTZWN0aW9uIGRlc2NyaXB0aW9uIC0tPgogICAgICA8cCBjbGFzcz0idGV4dC1jZW50ZXIgbWItNSB3LXJlc3BvbnNpdmUgbXgtYXV0byBsZWFkIGdyZXktdGV4dCI+CiAgICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvCiAgICAgICAgZWl1c21vZCB0ZW1wb3IgaW5jaWRpZHVudCB1dCBsYWJvcmUgZXQgZG9sb3JlIG1hZ25hIGFsaXF1YS4gVXQgZW5pbSBhZAogICAgICAgIG1pbmltIHZlbmlhbS4KICAgICAgPC9wPgoKICAgICAgPCEtLSBHcmlkIHJvdyAtLT4KICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICA8IS0tIEdyaWQgY29sdW1uIC0tPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IG1iLTQiPgogICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS00eCBmYS1jaGFydC1hcmVhIHBpbmstdGV4dCI+PC9pPgogICAgICAgICAgPGg0IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIG15LTQiPkFuYWx5dGljczwvaDQ+CiAgICAgICAgICA8cCBjbGFzcz0iZ3JleS10ZXh0Ij4KICAgICAgICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuCiAgICAgICAgICAgIFJlcHJlaGVuZGVyaXQgbWFpb3JlcyBuYW0sIGFwZXJpYW0gbWluaW1hIGFzc3VtZW5kYSBkZWxlbml0aSBoaWMuCiAgICAgICAgICA8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLSBHcmlkIGNvbHVtbiAtLT4KCiAgICAgICAgPCEtLSBHcmlkIGNvbHVtbiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBtYi00Ij4KICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtNHggZmEtcGVuY2lsLWFsdCBjeWFuLXRleHQiPjwvaT4KICAgICAgICAgIDxoNCBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCBteS00Ij5EZXNpZ248L2g0PgogICAgICAgICAgPHAgY2xhc3M9ImdyZXktdGV4dCI+CiAgICAgICAgICAgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNpY2luZyBlbGl0LgogICAgICAgICAgICBSZXByZWhlbmRlcml0IG1haW9yZXMgbmFtLCBhcGVyaWFtIG1pbmltYSBhc3N1bWVuZGEgZGVsZW5pdGkgaGljLgogICAgICAgICAgPC9wPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gR3JpZCBjb2x1bW4gLS0+CgogICAgICAgIDwhLS0gR3JpZCBjb2x1bW4gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgbWItNCI+CiAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLTR4IGZhLWxhcHRvcCBpbmRpZ28tdGV4dCI+PC9pPgogICAgICAgICAgPGg0IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIG15LTQiPkRldmVsb3BtZW50PC9oND4KICAgICAgICAgIDxwIGNsYXNzPSJncmV5LXRleHQiPgogICAgICAgICAgICBMb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzaWNpbmcgZWxpdC4KICAgICAgICAgICAgUmVwcmVoZW5kZXJpdCBtYWlvcmVzIG5hbSwgYXBlcmlhbSBtaW5pbWEgYXNzdW1lbmRhIGRlbGVuaXRpIGhpYy4KICAgICAgICAgIDwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIEdyaWQgY29sdW1uIC0tPgogICAgICA8L2Rpdj4KICAgICAgPCEtLSBHcmlkIHJvdyAtLT4KICAgIDwvc2VjdGlvbj4KICAgIDwhLS0gU2VjdGlvbjogRmVhdHVyZXMgdi4xIC0tPgoKICAgIDxociBjbGFzcz0ibXktNSIgLz4KCiAgICA8IS0tIFNlY3Rpb246IEdhbGxlcnkgLS0+CiAgICA8c2VjdGlvbiBpZD0iZ2FsbGVyeSIgY2xhc3M9InNlY3Rpb24gd293IGZhZGVJbiIgZGF0YS13b3ctZGVsYXk9IjAuM3MiPgogICAgICA8IS0tIFNlY3Rpb24gaGVhZGluZyAtLT4KICAgICAgPGgxIGNsYXNzPSJ0ZXh0LWNlbnRlciBteS01IGgxIj5PdXIgd29yazwvaDE+CiAgICAgIDwhLS0gU2VjdGlvbiBkZXNjcmlwdGlvbiAtLT4KICAgICAgPHAgY2xhc3M9InRleHQtY2VudGVyIG1iLTUgdy1yZXNwb25zaXZlIG14LWF1dG8iPgogICAgICAgIExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQsIHNlZCBkbwogICAgICAgIGVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuIFV0IGVuaW0gYWQKICAgICAgICBtaW5pbSB2ZW5pYW0uCiAgICAgIDwvcD4KCiAgICAgIDxkaXYgY2xhc3M9InJvdyBwYi00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMTIiPgogICAgICAgICAgPG1kYi1jb250YWluZXIgY2xhc3M9Im10LTUiPgogICAgICAgICAgICA8bWRiLXJvdyBjbGFzcz0ibWRiLWxpZ2h0Ym94Ij4KICAgICAgICAgICAgICA8bWRiLWNvbCBtZD0iNCIgQGNsaWNrLm5hdGl2ZT0ic2hvdygwKSI+CiAgICAgICAgICAgICAgICA8ZmlndXJlPgogICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgc3JjPSJodHRwczovL21kYm9vdHN0cmFwLmNvbS9pbWcvUGhvdG9zL0hvcml6b250YWwvUGVvcGxlLzQtY29sL2ltZyUyMCgxMzIpLmpwZyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIgogICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9maWd1cmU+CiAgICAgICAgICAgICAgPC9tZGItY29sPgogICAgICAgICAgICAgIDxtZGItY29sIG1kPSI0IiBAY2xpY2submF0aXZlPSJzaG93KDEpIj4KICAgICAgICAgICAgICAgIDxmaWd1cmU+CiAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vbWRib290c3RyYXAuY29tL2ltZy9QaG90b3MvSG9yaXpvbnRhbC9Xb3JrLzEyLWNvbC9pbWclMjAoNDApLmpwZyIKICAgICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nLWZsdWlkIgogICAgICAgICAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgPC9maWd1cmU+CiAgICAgICAgICAgICAgPC9tZGItY29sPgogICAgICAgICAgICAgIDxtZGItY29sIG1kPSI0IiBAY2xpY2submF0aXZlPSJzaG93KDIpIj4KICAgICAgICAgICAgICAgIDxmaWd1cmU+CiAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICBzcmM9Imh0dHBzOi8vbWRib290c3RyYXAuY29tL2ltZy9QaG90b3MvSG9yaXpvbnRhbC9Xb3JrLzQtY29sL2ltZyUyMCgxNCkuanBnIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWctZmx1aWQiCiAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICA8L2ZpZ3VyZT4KICAgICAgICAgICAgICA8L21kYi1jb2w+CiAgICAgICAgICAgIDwvbWRiLXJvdz4KICAgICAgICAgIDwvbWRiLWNvbnRhaW5lcj4KCiAgICAgICAgICA8bWRiLWxpZ2h0Ym94CiAgICAgICAgICAgIDp2aXNpYmxlPSJ2aXNpYmxlIgogICAgICAgICAgICA6aW1ncz0iaW1ncyIKICAgICAgICAgICAgOmluZGV4PSJpbmRleCIKICAgICAgICAgICAgQGhpZGU9ImhhbmRsZUhpZGUiCiAgICAgICAgICA+PC9tZGItbGlnaHRib3g+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9zZWN0aW9uPgogICAgPCEtLSAvU2VjdGlvbjogR2FsbGVyeSAtLT4KCiAgICA8aHIgY2xhc3M9Im15LTUiIC8+CgogICAgPCEtLSBTZWN0aW9uOiBDb250YWN0IHYuMiAtLT4KICAgIDxzZWN0aW9uCiAgICAgIGlkPSJjb250YWN0IgogICAgICBjbGFzcz0ic2VjdGlvbiBwYi01IHdvdyBmYWRlSW4iCiAgICAgIGRhdGEtd293LWRlbGF5PSIwLjNzIgogICAgPgogICAgICA8IS0tIFNlY3Rpb24gaGVhZGluZyAtLT4KICAgICAgPGgyIGNsYXNzPSJ0ZXh0LWNlbnRlciBteS01IGgxIj5Db250YWN0IHVzPC9oMj4KICAgICAgPCEtLSBTZWN0aW9uIGRlc2NyaXB0aW9uIC0tPgogICAgICA8cCBjbGFzcz0idGV4dC1jZW50ZXIgbWItNSB3LXJlc3BvbnNpdmUgbXgtYXV0byI+CiAgICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2ljaW5nIGVsaXQuIEZ1Z2l0LCBlcnJvcgogICAgICAgIGFtZXQgbnVtcXVhbSBpdXJlIHByb3ZpZGVudCB2b2x1cHRhdGUgZXNzZSBxdWFzaSwgdmVyaXRhdGlzIHRvdGFtCiAgICAgICAgdm9sdXB0YXMgbm9zdHJ1bSBxdWlzcXVhbSBldW0gcG9ycm8gYSBwYXJpYXR1ciBhY2N1c2FtdXMgdmVuaWFtLgogICAgICA8L3A+CgogICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDwhLS0gR3JpZCBjb2x1bW4gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTggY29sLXhsLTkiPgogICAgICAgICAgPGZvcm0+CiAgICAgICAgICAgIDwhLS0gR3JpZCByb3cgLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgPCEtLSBHcmlkIGNvbHVtbiAtLT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZC1mb3JtIG1iLTAiPgogICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9ImNvbnRhY3QtbmFtZSIgY2xhc3M9ImZvcm0tY29udHJvbCIgLz4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY29udGFjdC1uYW1lIiBjbGFzcz0iIj5Zb3VyIG5hbWU8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLSBHcmlkIGNvbHVtbiAtLT4KCiAgICAgICAgICAgICAgPCEtLSBHcmlkIGNvbHVtbiAtLT4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZC1mb3JtIG1iLTAiPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgIGlkPSJjb250YWN0LWVtYWlsIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmb3JtLWNvbnRyb2wiCiAgICAgICAgICAgICAgICAgIC8+CiAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9ImNvbnRhY3QtZW1haWwiIGNsYXNzPSIiPllvdXIgZW1haWw8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPCEtLSBHcmlkIGNvbHVtbiAtLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0gR3JpZCByb3cgLS0+CgogICAgICAgICAgICA8IS0tIEdyaWQgcm93IC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZC1mb3JtIG1iLTAiPgogICAgICAgICAgICAgICAgICA8aW5wdXQKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgIGlkPSJjb250YWN0LVN1YmplY3QiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY29udGFjdC1TdWJqZWN0IiBjbGFzcz0iIj5TdWJqZWN0PC9sYWJlbD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLSBHcmlkIHJvdyAtLT4KCiAgICAgICAgICAgIDwhLS0gR3JpZCByb3cgLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtYi00Ij4KICAgICAgICAgICAgICA8IS0tIEdyaWQgY29sdW1uIC0tPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZC1mb3JtIG1iLTAiPgogICAgICAgICAgICAgICAgICA8dGV4dGFyZWEKICAgICAgICAgICAgICAgICAgICB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgIGlkPSJjb250YWN0LW1lc3NhZ2UiCiAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1kLXRleHRhcmVhIGZvcm0tY29udHJvbCIKICAgICAgICAgICAgICAgICAgICByb3dzPSIzIgogICAgICAgICAgICAgICAgICA+PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iY29udGFjdC1tZXNzYWdlIj5Zb3VyIG1lc3NhZ2U8L2xhYmVsPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tIEdyaWQgcm93IC0tPgogICAgICAgICAgPC9mb3JtPgoKICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIHRleHQtbWQtbGVmdCBtYi00Ij4KICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tbGlnaHQtYmx1ZSI+U2VuZDwvYT4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gR3JpZCBjb2x1bW4gLS0+CgogICAgICAgIDwhLS0gR3JpZCBjb2x1bW4gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgY29sLXhsLTMiPgogICAgICAgICAgPHVsIGNsYXNzPSJjb250YWN0LWljb25zIGxpc3QtdW5zdHlsZWQgdGV4dC1jZW50ZXIiPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhcyBmYS1tYXAtbWFya2VyIGZhLTJ4Ij48L2k+CiAgICAgICAgICAgICAgPHA+U2FuIEZyYW5jaXNjbywgQ0EgOTQxMjYsIFVTQTwvcD4KICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICA8aSBjbGFzcz0iZmFzIGZhLXBob25lIGZhLTJ4Ij48L2k+CiAgICAgICAgICAgICAgPHA+KyAwMSAyMzQgNTY3IDg5PC9wPgogICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgIDxpIGNsYXNzPSJmYXMgZmEtZW52ZWxvcGUgZmEtMngiPjwvaT4KICAgICAgICAgICAgICA8cD5jb250YWN0QG1kYm9vdHN0cmFwLmNvbTwvcD4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLSBHcmlkIGNvbHVtbiAtLT4KICAgICAgPC9kaXY+CiAgICA8L3NlY3Rpb24+CiAgICA8IS0tIFNlY3Rpb246IENvbnRhY3Qgdi4yIC0tPgogIDwvZGl2PgoKICA8IS0tIEZvb3RlciAtLT4KICA8Zm9vdGVyIGNsYXNzPSJwYWdlLWZvb3RlciBwdC00IG10LTQgdGV4dC1jZW50ZXIgdGV4dC1tZC1sZWZ0IGdyZXkiPgogICAgPCEtLSBGb290ZXIgTGlua3MgLS0+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgIDwhLS0gRmlyc3QgY29sdW1uIC0tPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02Ij4KICAgICAgICAgIDxoNiBjbGFzcz0idGV4dC11cHBlcmNhc2UgZm9udC13ZWlnaHQtYm9sZCI+Rm9vdGVyIENvbnRlbnQ8L2g2PgogICAgICAgICAgPHA+CiAgICAgICAgICAgIEhlcmUgeW91IGNhbiB1c2Ugcm93cyBhbmQgY29sdW1ucyBoZXJlIHRvIG9yZ2FuaXplIHlvdXIgZm9vdGVyCiAgICAgICAgICAgIGNvbnRlbnQuCiAgICAgICAgICA8L3A+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLSBGaXJzdCBjb2x1bW4gLS0+CgogICAgICAgIDwhLS0gU2Vjb25kIGNvbHVtbiAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyI+CiAgICAgICAgICA8aDYgY2xhc3M9InRleHQtdXBwZXJjYXNlIGZvbnQtd2VpZ2h0LWJvbGQiPkxpbmtzPC9oNj4KICAgICAgICAgIDx1bCBjbGFzcz0ibGlzdC11bnN0eWxlZCI+CiAgICAgICAgICAgIDxsaT48YSBocmVmPSIjISI+TGluayAxPC9hPjwvbGk+CiAgICAgICAgICAgIDxsaT48YSBocmVmPSIjISI+TGluayAyPC9hPjwvbGk+CiAgICAgICAgICAgIDxsaT48YSBocmVmPSIjISI+TGluayAzPC9hPjwvbGk+CiAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0gU2Vjb25kIGNvbHVtbiAtLT4KCiAgICAgICAgPCEtLSBUaGlyZCBjb2x1bW4gLS0+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMiPgogICAgICAgICAgPGg2IGNsYXNzPSJ0ZXh0LXVwcGVyY2FzZSBmb250LXdlaWdodC1ib2xkIj5MaW5rczwvaDY+CiAgICAgICAgICA8dWwgY2xhc3M9Imxpc3QtdW5zdHlsZWQiPgogICAgICAgICAgICA8bGk+PGEgaHJlZj0iIyEiPkxpbmsgMTwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaHJlZj0iIyEiPkxpbmsgMjwvYT48L2xpPgogICAgICAgICAgICA8bGk+PGEgaHJlZj0iIyEiPkxpbmsgMzwvYT48L2xpPgogICAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIFRoaXJkIGNvbHVtbiAtLT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDwhLS0gRm9vdGVyIExpbmtzIC0tPgoKICAgIDwhLS0gQ29weXJpZ2h0IC0tPgogICAgPGRpdiBjbGFzcz0iZm9vdGVyLWNvcHlyaWdodCBweS0zIHRleHQtY2VudGVyIj4KICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICAmY29weTsgMjAxOCBDb3B5cmlnaHQ6CiAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9tZGJvb3RzdHJhcC5jb20vYm9vdHN0cmFwLXR1dG9yaWFsLyI+CiAgICAgICAgICBNREJvb3RzdHJhcC5jb20KICAgICAgICA8L2E+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8IS0tIENvcHlyaWdodCAtLT4KICA8L2Zvb3Rlcj4KICA8IS0tIEZvb3RlciAtLT4KPC9kaXY+Cg=="},null]}