{"remainingRequest":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\src\\components\\css\\Grid.vue?vue&type=template&id=06d21b02&scoped=true&","dependencies":[{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\src\\components\\css\\Grid.vue","mtime":1585101964000},{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\ACodingPGT\\KodeHive\\bahan\\mdbvuepro\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}